<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>后端 - 标签 - VVulpes</title>
        <link>https://b1ankc-mov.github.io/tags/%E5%90%8E%E7%AB%AF/</link>
        <description>后端 - 标签 - VVulpes</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>VVulpes@163.com (Vulpes)</managingEditor>
            <webMaster>VVulpes@163.com (Vulpes)</webMaster><lastBuildDate>Thu, 07 Mar 2024 08:56:20 &#43;0800</lastBuildDate><atom:link href="https://b1ankc-mov.github.io/tags/%E5%90%8E%E7%AB%AF/" rel="self" type="application/rss+xml" /><item>
    <title>[Java] 从其他表中查出待存储的表名，并将数据插入该表的实现（跨数据库/数据库平台）</title>
    <link>https://b1ankc-mov.github.io/posts/tdengine_navicat/</link>
    <pubDate>Thu, 07 Mar 2024 08:56:20 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/tdengine_navicat/</guid>
    <description><![CDATA[<p>最后实现的功能大概为：根据传入的<code>person_id</code>，在存放数据位置信息的表中，筛选出数据要插入的表名（例如，person_id=1的数据，在<code>work_table_info</code>表中查出，需要存储在table_id_1表中），并将数据插入。</p>
<h2 id="实体类">实体类</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Daily</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">time</span><span class="p">;</span><span class="w">	</span><span class="c1">//打卡时间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Double</span><span class="w"> </span><span class="n">longitude</span><span class="p">;</span><span class="w">	</span><span class="c1">//打卡经纬度</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Double</span><span class="w"> </span><span class="n">latitude</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">person_id</span><span class="p">;</span><span class="w">	</span><span class="c1">//打卡人员id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>[Java] TDengine时序数据库时间戳(timestamp)字段插入数据的实现方法</title>
    <link>https://b1ankc-mov.github.io/posts/tdengine_timestamp/</link>
    <pubDate>Wed, 06 Mar 2024 15:07:37 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/tdengine_timestamp/</guid>
    <description><![CDATA[<h2 id="实体类">实体类</h2>
<p>定义实体类，插入数据分别代表<code>打卡时间</code>、<code>员工id</code>，</p>
<p>打卡时间是最后需要插入时序数据库中的<strong>时间戳类型字段</strong>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Daily</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">collect_time</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>【Java全栈学习】十九、Springboot&#43;Vue云端环境部署(阿里云服务器部署项目)</title>
    <link>https://b1ankc-mov.github.io/posts/springbootvuep20/</link>
    <pubDate>Mon, 15 Jan 2024 11:10:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/springbootvuep20/</guid>
    <description><![CDATA[<div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw" aria-hidden="true"></i>注意<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>在部署前后端项目之前，首先需要保证nginx服务是开启的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemctl start nginx <span class="c1">#开启nginx服务</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接着将服务器的公网IP地址粘到浏览器中，如果能看见如下界面，说明nginx可以访问。(这个访问的是80端口，需要保证安全组的80端口是开启的)</p>
<p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/B1ANKC-MOV/HttpImg@master/20240116/COS1.755p8emc61c0.webp" title="nginx成功界面" data-thumbnail="https://cdn.jsdelivr.net/gh/B1ANKC-MOV/HttpImg@master/20240116/COS1.755p8emc61c0.webp" data-sub-html="<h2> </h2><p>nginx成功界面</p>">
        
    </a><figcaption class="image-caption">nginx成功界面</figcaption>
    </figure></p>
</div>
        </div>
    </div>]]></description>
</item>
<item>
    <title>【Java全栈学习】十八、Springboot&#43;Vue云端环境配置(阿里云服务器环境配置)</title>
    <link>https://b1ankc-mov.github.io/posts/springbootvuep19/</link>
    <pubDate>Fri, 12 Jan 2024 13:55:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/springbootvuep19/</guid>
    <description><![CDATA[<h2 id="云端环境准备">云端环境准备</h2>
<div class="details admonition example open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-list-ol fa-fw" aria-hidden="true"></i>注意<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">以下部署基于Centos7 系统环境</div>
        </div>
    </div>]]></description>
</item>
<item>
    <title>【Java全栈学习】十七、阿里云服务器的配置&amp;搭建&amp;购买&amp;使用</title>
    <link>https://b1ankc-mov.github.io/posts/springbootvuep18/</link>
    <pubDate>Thu, 11 Jan 2024 15:46:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/springbootvuep18/</guid>
    <description><![CDATA[<h2 id="云服务器介绍">云服务器介绍</h2>
<h3 id="云服务器概念">云服务器概念</h3>
<ul>
<li>云服务器(Elastic Compute Service, ECS)是一种简单高效、安全可靠、处理能力可弹性伸缩的计算服务。其管理方式比物理服务器更简单高效。</li>
<li>用户无需提前购买硬件，即可迅速创建或释放任意多台云服务器。</li>
</ul>]]></description>
</item>
<item>
    <title>【Java全栈学习】十六、SpringBoot&#43;vue-element-template(前后端集成)</title>
    <link>https://b1ankc-mov.github.io/posts/springbootvuep17/</link>
    <pubDate>Thu, 11 Jan 2024 13:44:38 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/springbootvuep17/</guid>
    <description><![CDATA[将后台管理模板与项目前端进行集成，简单修改前端API接口与后端相连。]]></description>
</item>
<item>
    <title>【Java全栈学习】十五、JWT跨域认证</title>
    <link>https://b1ankc-mov.github.io/posts/springbootp16/</link>
    <pubDate>Thu, 11 Jan 2024 10:16:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/springbootp16/</guid>
    <description><![CDATA[<h2 id="session认证">Session认证</h2>
<p>互联网服务离不开用户认证。一般流程是下面这样：</p>
<ol>
<li>
<p>用户向服务器发送用户名和密码。</p>
</li>
<li>
<p>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等。</p>
</li>
<li>
<p>服务器向用户返回一个 session_id，写入用户的 Cookie。</p>
</li>
<li>
<p>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p>
</li>
<li>
<p>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p>
</li>
</ol>]]></description>
</item>
<item>
    <title>[Java] Mybatis向Mysql插入主副表JSON数据</title>
    <link>https://b1ankc-mov.github.io/posts/mybatisplusmysql/</link>
    <pubDate>Mon, 08 Jan 2024 08:55:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/mybatisplusmysql/</guid>
    <description><![CDATA[<h2 id="创建主表实体类">创建主表实体类</h2>
<p>首先创建一个entity包下的主表实体类，这里命名为User。</p>
<p>代码如下：</p>]]></description>
</item>
<item>
    <title>【Java全栈学习】十、Axios网络请求</title>
    <link>https://b1ankc-mov.github.io/posts/vuep11/</link>
    <pubDate>Fri, 29 Dec 2023 08:47:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/vuep11/</guid>
    <description><![CDATA[<h2 id="axios的使用">Axios的使用</h2>
<h3 id="axios简介">Axios简介</h3>
<p>使用背景：在实际项目开发中，前端页面所需要的数据往往需要从服务器端获取，这必然涉及与服务器的通信。
Axios主要是前端的一个网络请求框架，大部分基于<em><strong>Ajax</strong></em></p>
<ul>
<li>Axios基于<strong>promise</strong>网络请求库，作用与node.js和浏览器中。</li>
<li>Axios在浏览器端使用XMLHttpRequests发送网络请求，并能自动完成<strong>JSON</strong>数据的转换。</li>
<li>地址</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://www.axios-http.cn/
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>【Java全栈学习】六、MybatisPlus多表查询及分页查询</title>
    <link>https://b1ankc-mov.github.io/posts/springbootp7/</link>
    <pubDate>Tue, 05 Dec 2023 16:55:12 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://b1ankc-mov.github.io/posts/springbootp7/</guid>
    <description><![CDATA[<h2 id="mybatis多表查询">Mybatis多表查询</h2>
<p>实现复杂关系映射，可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置。</p>
<table>
<thead>
<tr>
<th style="text-align:left">注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@Reults</td>
<td style="text-align:left">代替<resultMap>标签,该注解中可以加入单个或多个@Result注解</td>
</tr>
<tr>
<td style="text-align:left">@Result</td>
<td style="text-align:left">代替<id>标签和<Result>标签，@Result中可以使用以下属性: <br/>- column: 数据表的字段名称<br />- property:类中对应的属性名<br />- one:与@one注解配合，进行一对一的映射<br />- many: 与@Many注解配合，进行一对多的映射</td>
</tr>
<tr>
<td style="text-align:left">@One</td>
<td style="text-align:left">代替<assocation>标签，用于指定查询中返回的单一对象<br />通过select属性指定用于多表查询的方法<br />使用格式:@Result(column=&quot;&quot;,property=&quot;&quot;,one=@one(select=&quot;&quot;))</td>
</tr>
<tr>
<td style="text-align:left">@Many</td>
<td style="text-align:left">代替<collection>标签,用于指定查询中返回的集合对象<br />使用格式:@Result(column=&quot;&quot;,property=&quot;&quot;,many=@Many(select=&quot;&quot;))</td>
</tr>
</tbody>
</table>]]></description>
</item>
</channel>
</rss>
